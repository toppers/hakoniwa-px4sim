name: Build

on: 
  push:
    branches-ignore:
      - reconstruct

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.14

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install GTest on Ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get install -y libgtest-dev
    
      - name: Install GTest on macOS
        if: startsWith(matrix.os, 'macos')
        run: brew install googletest
  
      - name: Build and hakoniwa-px4sim on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          cmake -G "Visual Studio 17 2022" -A x64 .
          cmake --build . --config Release

      # Build and Test drone_physics on Windows with Visual Studio
      - name: Build and Test drone_physics on Windows
        if: startsWith(matrix.os, 'windows')
        shell: cmd
        run: |
          cd drone_physics
          cmake -G "Visual Studio 17 2022" -A x64 .
          cmake --build . --config Release
          ctest -C Release --output-on-failure
      
      - name: Build and Test hakoniwa-px4sim/drone_physics on ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        run: |
            cd drone_physics && cmake -D HAKO_CLIENT_OPTION_FILEPATH=../cmake-options/linux-cmake-options.cmake . && make  && make test

      - name: Build and Test hakoniwa-px4sim/drone_physics on macOs
        if: startsWith(matrix.os, 'macos')
        run: |
            cd drone_physics && cmake . && make && make test
  
      - name: Build and Test hakoniwa-px4sim/hakoniwa
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          cd hakoniwa && bash build.bash  && cd cmake-build && test/hako-px4sim-test

  
